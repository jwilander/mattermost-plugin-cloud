// Code generated by MockGen. DO NOT EDIT.
// Source: ./server/plugin.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-cloud/model"
	reflect "reflect"
)

// MockCloudClient is a mock of CloudClient interface
type MockCloudClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudClientMockRecorder
}

// MockCloudClientMockRecorder is the mock recorder for MockCloudClient
type MockCloudClientMockRecorder struct {
	mock *MockCloudClient
}

// NewMockCloudClient creates a new mock instance
func NewMockCloudClient(ctrl *gomock.Controller) *MockCloudClient {
	mock := &MockCloudClient{ctrl: ctrl}
	mock.recorder = &MockCloudClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudClient) EXPECT() *MockCloudClientMockRecorder {
	return m.recorder
}

// GetClusters mocks base method
func (m *MockCloudClient) GetClusters(arg0 *model.GetClustersRequest) ([]*model.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusters", arg0)
	ret0, _ := ret[0].([]*model.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusters indicates an expected call of GetClusters
func (mr *MockCloudClientMockRecorder) GetClusters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusters", reflect.TypeOf((*MockCloudClient)(nil).GetClusters), arg0)
}

// CreateInstallation mocks base method
func (m *MockCloudClient) CreateInstallation(request *model.CreateInstallationRequest) (*model.Installation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstallation", request)
	ret0, _ := ret[0].(*model.Installation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstallation indicates an expected call of CreateInstallation
func (mr *MockCloudClientMockRecorder) CreateInstallation(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstallation", reflect.TypeOf((*MockCloudClient)(nil).CreateInstallation), request)
}

// GetInstallation mocks base method
func (m *MockCloudClient) GetInstallation(installationID string) (*model.Installation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallation", installationID)
	ret0, _ := ret[0].(*model.Installation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallation indicates an expected call of GetInstallation
func (mr *MockCloudClientMockRecorder) GetInstallation(installationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallation", reflect.TypeOf((*MockCloudClient)(nil).GetInstallation), installationID)
}

// GetInstallations mocks base method
func (m *MockCloudClient) GetInstallations(arg0 *model.GetInstallationsRequest) ([]*model.Installation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallations", arg0)
	ret0, _ := ret[0].([]*model.Installation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallations indicates an expected call of GetInstallations
func (mr *MockCloudClientMockRecorder) GetInstallations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallations", reflect.TypeOf((*MockCloudClient)(nil).GetInstallations), arg0)
}

// UpgradeInstallation mocks base method
func (m *MockCloudClient) UpgradeInstallation(installationID string, request *model.UpgradeInstallationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeInstallation", installationID, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeInstallation indicates an expected call of UpgradeInstallation
func (mr *MockCloudClientMockRecorder) UpgradeInstallation(installationID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeInstallation", reflect.TypeOf((*MockCloudClient)(nil).UpgradeInstallation), installationID, request)
}

// DeleteInstallation mocks base method
func (m *MockCloudClient) DeleteInstallation(installationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstallation", installationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstallation indicates an expected call of DeleteInstallation
func (mr *MockCloudClientMockRecorder) DeleteInstallation(installationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstallation", reflect.TypeOf((*MockCloudClient)(nil).DeleteInstallation), installationID)
}

// GetClusterInstallations mocks base method
func (m *MockCloudClient) GetClusterInstallations(request *model.GetClusterInstallationsRequest) ([]*model.ClusterInstallation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterInstallations", request)
	ret0, _ := ret[0].([]*model.ClusterInstallation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterInstallations indicates an expected call of GetClusterInstallations
func (mr *MockCloudClientMockRecorder) GetClusterInstallations(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterInstallations", reflect.TypeOf((*MockCloudClient)(nil).GetClusterInstallations), request)
}

// RunMattermostCLICommandOnClusterInstallation mocks base method
func (m *MockCloudClient) RunMattermostCLICommandOnClusterInstallation(clusterInstallationID string, subcommand []string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunMattermostCLICommandOnClusterInstallation", clusterInstallationID, subcommand)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunMattermostCLICommandOnClusterInstallation indicates an expected call of RunMattermostCLICommandOnClusterInstallation
func (mr *MockCloudClientMockRecorder) RunMattermostCLICommandOnClusterInstallation(clusterInstallationID, subcommand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunMattermostCLICommandOnClusterInstallation", reflect.TypeOf((*MockCloudClient)(nil).RunMattermostCLICommandOnClusterInstallation), clusterInstallationID, subcommand)
}

// MockDockerClientInterface is a mock of DockerClientInterface interface
type MockDockerClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDockerClientInterfaceMockRecorder
}

// MockDockerClientInterfaceMockRecorder is the mock recorder for MockDockerClientInterface
type MockDockerClientInterfaceMockRecorder struct {
	mock *MockDockerClientInterface
}

// NewMockDockerClientInterface creates a new mock instance
func NewMockDockerClientInterface(ctrl *gomock.Controller) *MockDockerClientInterface {
	mock := &MockDockerClientInterface{ctrl: ctrl}
	mock.recorder = &MockDockerClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDockerClientInterface) EXPECT() *MockDockerClientInterfaceMockRecorder {
	return m.recorder
}

// ValidTag mocks base method
func (m *MockDockerClientInterface) ValidTag(desiredTag, repository string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidTag", desiredTag, repository)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidTag indicates an expected call of ValidTag
func (mr *MockDockerClientInterfaceMockRecorder) ValidTag(desiredTag, repository interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidTag", reflect.TypeOf((*MockDockerClientInterface)(nil).ValidTag), desiredTag, repository)
}
