// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/gsagula/go/pkg/mod/github.com/mattermost/mattermost-server@v1.4.1-0.20190926112648-af3ffeed1a4a/plugin/helpers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-server/model"
	reflect "reflect"
)

// MockHelpers is a mock of Helpers interface
type MockHelpers struct {
	ctrl     *gomock.Controller
	recorder *MockHelpersMockRecorder
}

// MockHelpersMockRecorder is the mock recorder for MockHelpers
type MockHelpersMockRecorder struct {
	mock *MockHelpers
}

// NewMockHelpers creates a new mock instance
func NewMockHelpers(ctrl *gomock.Controller) *MockHelpers {
	mock := &MockHelpers{ctrl: ctrl}
	mock.recorder = &MockHelpersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelpers) EXPECT() *MockHelpersMockRecorder {
	return m.recorder
}

// EnsureBot mocks base method
func (m *MockHelpers) EnsureBot(bot *model.Bot) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureBot", bot)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureBot indicates an expected call of EnsureBot
func (mr *MockHelpersMockRecorder) EnsureBot(bot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureBot", reflect.TypeOf((*MockHelpers)(nil).EnsureBot), bot)
}

// KVSetJSON mocks base method
func (m *MockHelpers) KVSetJSON(key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVSetJSON", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// KVSetJSON indicates an expected call of KVSetJSON
func (mr *MockHelpersMockRecorder) KVSetJSON(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVSetJSON", reflect.TypeOf((*MockHelpers)(nil).KVSetJSON), key, value)
}

// KVCompareAndSetJSON mocks base method
func (m *MockHelpers) KVCompareAndSetJSON(key string, oldValue, newValue interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVCompareAndSetJSON", key, oldValue, newValue)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KVCompareAndSetJSON indicates an expected call of KVCompareAndSetJSON
func (mr *MockHelpersMockRecorder) KVCompareAndSetJSON(key, oldValue, newValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVCompareAndSetJSON", reflect.TypeOf((*MockHelpers)(nil).KVCompareAndSetJSON), key, oldValue, newValue)
}

// KVCompareAndDeleteJSON mocks base method
func (m *MockHelpers) KVCompareAndDeleteJSON(key string, oldValue interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVCompareAndDeleteJSON", key, oldValue)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KVCompareAndDeleteJSON indicates an expected call of KVCompareAndDeleteJSON
func (mr *MockHelpersMockRecorder) KVCompareAndDeleteJSON(key, oldValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVCompareAndDeleteJSON", reflect.TypeOf((*MockHelpers)(nil).KVCompareAndDeleteJSON), key, oldValue)
}

// KVGetJSON mocks base method
func (m *MockHelpers) KVGetJSON(key string, value interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVGetJSON", key, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KVGetJSON indicates an expected call of KVGetJSON
func (mr *MockHelpersMockRecorder) KVGetJSON(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVGetJSON", reflect.TypeOf((*MockHelpers)(nil).KVGetJSON), key, value)
}

// KVSetWithExpiryJSON mocks base method
func (m *MockHelpers) KVSetWithExpiryJSON(key string, value interface{}, expireInSeconds int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVSetWithExpiryJSON", key, value, expireInSeconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// KVSetWithExpiryJSON indicates an expected call of KVSetWithExpiryJSON
func (mr *MockHelpersMockRecorder) KVSetWithExpiryJSON(key, value, expireInSeconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVSetWithExpiryJSON", reflect.TypeOf((*MockHelpers)(nil).KVSetWithExpiryJSON), key, value, expireInSeconds)
}
