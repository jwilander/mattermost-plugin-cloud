// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/gsagula/go/pkg/mod/github.com/mattermost/mattermost-server@v1.4.1-0.20190926112648-af3ffeed1a4a/plugin/api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-server/model"
	reflect "reflect"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// LoadPluginConfiguration mocks base method
func (m *MockAPI) LoadPluginConfiguration(dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPluginConfiguration", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadPluginConfiguration indicates an expected call of LoadPluginConfiguration
func (mr *MockAPIMockRecorder) LoadPluginConfiguration(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPluginConfiguration", reflect.TypeOf((*MockAPI)(nil).LoadPluginConfiguration), dest)
}

// RegisterCommand mocks base method
func (m *MockAPI) RegisterCommand(command *model.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCommand", command)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterCommand indicates an expected call of RegisterCommand
func (mr *MockAPIMockRecorder) RegisterCommand(command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCommand", reflect.TypeOf((*MockAPI)(nil).RegisterCommand), command)
}

// UnregisterCommand mocks base method
func (m *MockAPI) UnregisterCommand(teamId, trigger string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterCommand", teamId, trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterCommand indicates an expected call of UnregisterCommand
func (mr *MockAPIMockRecorder) UnregisterCommand(teamId, trigger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterCommand", reflect.TypeOf((*MockAPI)(nil).UnregisterCommand), teamId, trigger)
}

// GetSession mocks base method
func (m *MockAPI) GetSession(sessionId string) (*model.Session, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionId)
	ret0, _ := ret[0].(*model.Session)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession
func (mr *MockAPIMockRecorder) GetSession(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockAPI)(nil).GetSession), sessionId)
}

// GetConfig mocks base method
func (m *MockAPI) GetConfig() *model.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*model.Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig
func (mr *MockAPIMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockAPI)(nil).GetConfig))
}

// GetUnsanitizedConfig mocks base method
func (m *MockAPI) GetUnsanitizedConfig() *model.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnsanitizedConfig")
	ret0, _ := ret[0].(*model.Config)
	return ret0
}

// GetUnsanitizedConfig indicates an expected call of GetUnsanitizedConfig
func (mr *MockAPIMockRecorder) GetUnsanitizedConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnsanitizedConfig", reflect.TypeOf((*MockAPI)(nil).GetUnsanitizedConfig))
}

// SaveConfig mocks base method
func (m *MockAPI) SaveConfig(config *model.Config) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", config)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig
func (mr *MockAPIMockRecorder) SaveConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockAPI)(nil).SaveConfig), config)
}

// GetPluginConfig mocks base method
func (m *MockAPI) GetPluginConfig() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginConfig")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetPluginConfig indicates an expected call of GetPluginConfig
func (mr *MockAPIMockRecorder) GetPluginConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginConfig", reflect.TypeOf((*MockAPI)(nil).GetPluginConfig))
}

// SavePluginConfig mocks base method
func (m *MockAPI) SavePluginConfig(config map[string]interface{}) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePluginConfig", config)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// SavePluginConfig indicates an expected call of SavePluginConfig
func (mr *MockAPIMockRecorder) SavePluginConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePluginConfig", reflect.TypeOf((*MockAPI)(nil).SavePluginConfig), config)
}

// GetBundlePath mocks base method
func (m *MockAPI) GetBundlePath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBundlePath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBundlePath indicates an expected call of GetBundlePath
func (mr *MockAPIMockRecorder) GetBundlePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundlePath", reflect.TypeOf((*MockAPI)(nil).GetBundlePath))
}

// GetLicense mocks base method
func (m *MockAPI) GetLicense() *model.License {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicense")
	ret0, _ := ret[0].(*model.License)
	return ret0
}

// GetLicense indicates an expected call of GetLicense
func (mr *MockAPIMockRecorder) GetLicense() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicense", reflect.TypeOf((*MockAPI)(nil).GetLicense))
}

// GetServerVersion mocks base method
func (m *MockAPI) GetServerVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServerVersion indicates an expected call of GetServerVersion
func (mr *MockAPIMockRecorder) GetServerVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerVersion", reflect.TypeOf((*MockAPI)(nil).GetServerVersion))
}

// GetSystemInstallDate mocks base method
func (m *MockAPI) GetSystemInstallDate() (int64, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemInstallDate")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetSystemInstallDate indicates an expected call of GetSystemInstallDate
func (mr *MockAPIMockRecorder) GetSystemInstallDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemInstallDate", reflect.TypeOf((*MockAPI)(nil).GetSystemInstallDate))
}

// GetDiagnosticId mocks base method
func (m *MockAPI) GetDiagnosticId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiagnosticId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDiagnosticId indicates an expected call of GetDiagnosticId
func (mr *MockAPIMockRecorder) GetDiagnosticId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiagnosticId", reflect.TypeOf((*MockAPI)(nil).GetDiagnosticId))
}

// CreateUser mocks base method
func (m *MockAPI) CreateUser(user *model.User) (*model.User, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockAPIMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAPI)(nil).CreateUser), user)
}

// DeleteUser mocks base method
func (m *MockAPI) DeleteUser(userId string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userId)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockAPIMockRecorder) DeleteUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAPI)(nil).DeleteUser), userId)
}

// GetUsers mocks base method
func (m *MockAPI) GetUsers(options *model.UserGetOptions) ([]*model.User, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", options)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockAPIMockRecorder) GetUsers(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAPI)(nil).GetUsers), options)
}

// GetUser mocks base method
func (m *MockAPI) GetUser(userId string) (*model.User, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userId)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockAPIMockRecorder) GetUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAPI)(nil).GetUser), userId)
}

// GetUserByEmail mocks base method
func (m *MockAPI) GetUserByEmail(email string) (*model.User, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail
func (mr *MockAPIMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAPI)(nil).GetUserByEmail), email)
}

// GetUserByUsername mocks base method
func (m *MockAPI) GetUserByUsername(name string) (*model.User, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", name)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername
func (mr *MockAPIMockRecorder) GetUserByUsername(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockAPI)(nil).GetUserByUsername), name)
}

// GetUsersByUsernames mocks base method
func (m *MockAPI) GetUsersByUsernames(usernames []string) ([]*model.User, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByUsernames", usernames)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetUsersByUsernames indicates an expected call of GetUsersByUsernames
func (mr *MockAPIMockRecorder) GetUsersByUsernames(usernames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByUsernames", reflect.TypeOf((*MockAPI)(nil).GetUsersByUsernames), usernames)
}

// GetUsersInTeam mocks base method
func (m *MockAPI) GetUsersInTeam(teamId string, page, perPage int) ([]*model.User, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersInTeam", teamId, page, perPage)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetUsersInTeam indicates an expected call of GetUsersInTeam
func (mr *MockAPIMockRecorder) GetUsersInTeam(teamId, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInTeam", reflect.TypeOf((*MockAPI)(nil).GetUsersInTeam), teamId, page, perPage)
}

// GetTeamIcon mocks base method
func (m *MockAPI) GetTeamIcon(teamId string) ([]byte, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamIcon", teamId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetTeamIcon indicates an expected call of GetTeamIcon
func (mr *MockAPIMockRecorder) GetTeamIcon(teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamIcon", reflect.TypeOf((*MockAPI)(nil).GetTeamIcon), teamId)
}

// SetTeamIcon mocks base method
func (m *MockAPI) SetTeamIcon(teamId string, data []byte) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTeamIcon", teamId, data)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// SetTeamIcon indicates an expected call of SetTeamIcon
func (mr *MockAPIMockRecorder) SetTeamIcon(teamId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTeamIcon", reflect.TypeOf((*MockAPI)(nil).SetTeamIcon), teamId, data)
}

// RemoveTeamIcon mocks base method
func (m *MockAPI) RemoveTeamIcon(teamId string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamIcon", teamId)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// RemoveTeamIcon indicates an expected call of RemoveTeamIcon
func (mr *MockAPIMockRecorder) RemoveTeamIcon(teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamIcon", reflect.TypeOf((*MockAPI)(nil).RemoveTeamIcon), teamId)
}

// UpdateUser mocks base method
func (m *MockAPI) UpdateUser(user *model.User) (*model.User, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockAPIMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockAPI)(nil).UpdateUser), user)
}

// GetUserStatus mocks base method
func (m *MockAPI) GetUserStatus(userId string) (*model.Status, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStatus", userId)
	ret0, _ := ret[0].(*model.Status)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetUserStatus indicates an expected call of GetUserStatus
func (mr *MockAPIMockRecorder) GetUserStatus(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStatus", reflect.TypeOf((*MockAPI)(nil).GetUserStatus), userId)
}

// GetUserStatusesByIds mocks base method
func (m *MockAPI) GetUserStatusesByIds(userIds []string) ([]*model.Status, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStatusesByIds", userIds)
	ret0, _ := ret[0].([]*model.Status)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetUserStatusesByIds indicates an expected call of GetUserStatusesByIds
func (mr *MockAPIMockRecorder) GetUserStatusesByIds(userIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStatusesByIds", reflect.TypeOf((*MockAPI)(nil).GetUserStatusesByIds), userIds)
}

// UpdateUserStatus mocks base method
func (m *MockAPI) UpdateUserStatus(userId, status string) (*model.Status, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserStatus", userId, status)
	ret0, _ := ret[0].(*model.Status)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// UpdateUserStatus indicates an expected call of UpdateUserStatus
func (mr *MockAPIMockRecorder) UpdateUserStatus(userId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserStatus", reflect.TypeOf((*MockAPI)(nil).UpdateUserStatus), userId, status)
}

// UpdateUserActive mocks base method
func (m *MockAPI) UpdateUserActive(userId string, active bool) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserActive", userId, active)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// UpdateUserActive indicates an expected call of UpdateUserActive
func (mr *MockAPIMockRecorder) UpdateUserActive(userId, active interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserActive", reflect.TypeOf((*MockAPI)(nil).UpdateUserActive), userId, active)
}

// GetUsersInChannel mocks base method
func (m *MockAPI) GetUsersInChannel(channelId, sortBy string, page, perPage int) ([]*model.User, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersInChannel", channelId, sortBy, page, perPage)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetUsersInChannel indicates an expected call of GetUsersInChannel
func (mr *MockAPIMockRecorder) GetUsersInChannel(channelId, sortBy, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInChannel", reflect.TypeOf((*MockAPI)(nil).GetUsersInChannel), channelId, sortBy, page, perPage)
}

// GetLDAPUserAttributes mocks base method
func (m *MockAPI) GetLDAPUserAttributes(userId string, attributes []string) (map[string]string, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLDAPUserAttributes", userId, attributes)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetLDAPUserAttributes indicates an expected call of GetLDAPUserAttributes
func (mr *MockAPIMockRecorder) GetLDAPUserAttributes(userId, attributes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLDAPUserAttributes", reflect.TypeOf((*MockAPI)(nil).GetLDAPUserAttributes), userId, attributes)
}

// CreateTeam mocks base method
func (m *MockAPI) CreateTeam(team *model.Team) (*model.Team, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", team)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam
func (mr *MockAPIMockRecorder) CreateTeam(team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockAPI)(nil).CreateTeam), team)
}

// DeleteTeam mocks base method
func (m *MockAPI) DeleteTeam(teamId string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", teamId)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam
func (mr *MockAPIMockRecorder) DeleteTeam(teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockAPI)(nil).DeleteTeam), teamId)
}

// GetTeams mocks base method
func (m *MockAPI) GetTeams() ([]*model.Team, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams")
	ret0, _ := ret[0].([]*model.Team)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetTeams indicates an expected call of GetTeams
func (mr *MockAPIMockRecorder) GetTeams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*MockAPI)(nil).GetTeams))
}

// GetTeam mocks base method
func (m *MockAPI) GetTeam(teamId string) (*model.Team, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", teamId)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam
func (mr *MockAPIMockRecorder) GetTeam(teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockAPI)(nil).GetTeam), teamId)
}

// GetTeamByName mocks base method
func (m *MockAPI) GetTeamByName(name string) (*model.Team, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamByName", name)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetTeamByName indicates an expected call of GetTeamByName
func (mr *MockAPIMockRecorder) GetTeamByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamByName", reflect.TypeOf((*MockAPI)(nil).GetTeamByName), name)
}

// GetTeamsUnreadForUser mocks base method
func (m *MockAPI) GetTeamsUnreadForUser(userId string) ([]*model.TeamUnread, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamsUnreadForUser", userId)
	ret0, _ := ret[0].([]*model.TeamUnread)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetTeamsUnreadForUser indicates an expected call of GetTeamsUnreadForUser
func (mr *MockAPIMockRecorder) GetTeamsUnreadForUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamsUnreadForUser", reflect.TypeOf((*MockAPI)(nil).GetTeamsUnreadForUser), userId)
}

// UpdateTeam mocks base method
func (m *MockAPI) UpdateTeam(team *model.Team) (*model.Team, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", team)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// UpdateTeam indicates an expected call of UpdateTeam
func (mr *MockAPIMockRecorder) UpdateTeam(team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockAPI)(nil).UpdateTeam), team)
}

// SearchTeams mocks base method
func (m *MockAPI) SearchTeams(term string) ([]*model.Team, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTeams", term)
	ret0, _ := ret[0].([]*model.Team)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// SearchTeams indicates an expected call of SearchTeams
func (mr *MockAPIMockRecorder) SearchTeams(term interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTeams", reflect.TypeOf((*MockAPI)(nil).SearchTeams), term)
}

// GetTeamsForUser mocks base method
func (m *MockAPI) GetTeamsForUser(userId string) ([]*model.Team, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamsForUser", userId)
	ret0, _ := ret[0].([]*model.Team)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetTeamsForUser indicates an expected call of GetTeamsForUser
func (mr *MockAPIMockRecorder) GetTeamsForUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamsForUser", reflect.TypeOf((*MockAPI)(nil).GetTeamsForUser), userId)
}

// CreateTeamMember mocks base method
func (m *MockAPI) CreateTeamMember(teamId, userId string) (*model.TeamMember, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeamMember", teamId, userId)
	ret0, _ := ret[0].(*model.TeamMember)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// CreateTeamMember indicates an expected call of CreateTeamMember
func (mr *MockAPIMockRecorder) CreateTeamMember(teamId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeamMember", reflect.TypeOf((*MockAPI)(nil).CreateTeamMember), teamId, userId)
}

// CreateTeamMembers mocks base method
func (m *MockAPI) CreateTeamMembers(teamId string, userIds []string, requestorId string) ([]*model.TeamMember, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeamMembers", teamId, userIds, requestorId)
	ret0, _ := ret[0].([]*model.TeamMember)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// CreateTeamMembers indicates an expected call of CreateTeamMembers
func (mr *MockAPIMockRecorder) CreateTeamMembers(teamId, userIds, requestorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeamMembers", reflect.TypeOf((*MockAPI)(nil).CreateTeamMembers), teamId, userIds, requestorId)
}

// DeleteTeamMember mocks base method
func (m *MockAPI) DeleteTeamMember(teamId, userId, requestorId string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamMember", teamId, userId, requestorId)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// DeleteTeamMember indicates an expected call of DeleteTeamMember
func (mr *MockAPIMockRecorder) DeleteTeamMember(teamId, userId, requestorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamMember", reflect.TypeOf((*MockAPI)(nil).DeleteTeamMember), teamId, userId, requestorId)
}

// GetTeamMembers mocks base method
func (m *MockAPI) GetTeamMembers(teamId string, page, perPage int) ([]*model.TeamMember, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamMembers", teamId, page, perPage)
	ret0, _ := ret[0].([]*model.TeamMember)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetTeamMembers indicates an expected call of GetTeamMembers
func (mr *MockAPIMockRecorder) GetTeamMembers(teamId, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamMembers", reflect.TypeOf((*MockAPI)(nil).GetTeamMembers), teamId, page, perPage)
}

// GetTeamMember mocks base method
func (m *MockAPI) GetTeamMember(teamId, userId string) (*model.TeamMember, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamMember", teamId, userId)
	ret0, _ := ret[0].(*model.TeamMember)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetTeamMember indicates an expected call of GetTeamMember
func (mr *MockAPIMockRecorder) GetTeamMember(teamId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamMember", reflect.TypeOf((*MockAPI)(nil).GetTeamMember), teamId, userId)
}

// GetTeamMembersForUser mocks base method
func (m *MockAPI) GetTeamMembersForUser(userId string, page, perPage int) ([]*model.TeamMember, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamMembersForUser", userId, page, perPage)
	ret0, _ := ret[0].([]*model.TeamMember)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetTeamMembersForUser indicates an expected call of GetTeamMembersForUser
func (mr *MockAPIMockRecorder) GetTeamMembersForUser(userId, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamMembersForUser", reflect.TypeOf((*MockAPI)(nil).GetTeamMembersForUser), userId, page, perPage)
}

// UpdateTeamMemberRoles mocks base method
func (m *MockAPI) UpdateTeamMemberRoles(teamId, userId, newRoles string) (*model.TeamMember, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeamMemberRoles", teamId, userId, newRoles)
	ret0, _ := ret[0].(*model.TeamMember)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// UpdateTeamMemberRoles indicates an expected call of UpdateTeamMemberRoles
func (mr *MockAPIMockRecorder) UpdateTeamMemberRoles(teamId, userId, newRoles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeamMemberRoles", reflect.TypeOf((*MockAPI)(nil).UpdateTeamMemberRoles), teamId, userId, newRoles)
}

// CreateChannel mocks base method
func (m *MockAPI) CreateChannel(channel *model.Channel) (*model.Channel, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", channel)
	ret0, _ := ret[0].(*model.Channel)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel
func (mr *MockAPIMockRecorder) CreateChannel(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockAPI)(nil).CreateChannel), channel)
}

// DeleteChannel mocks base method
func (m *MockAPI) DeleteChannel(channelId string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", channelId)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// DeleteChannel indicates an expected call of DeleteChannel
func (mr *MockAPIMockRecorder) DeleteChannel(channelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockAPI)(nil).DeleteChannel), channelId)
}

// GetPublicChannelsForTeam mocks base method
func (m *MockAPI) GetPublicChannelsForTeam(teamId string, page, perPage int) ([]*model.Channel, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicChannelsForTeam", teamId, page, perPage)
	ret0, _ := ret[0].([]*model.Channel)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetPublicChannelsForTeam indicates an expected call of GetPublicChannelsForTeam
func (mr *MockAPIMockRecorder) GetPublicChannelsForTeam(teamId, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicChannelsForTeam", reflect.TypeOf((*MockAPI)(nil).GetPublicChannelsForTeam), teamId, page, perPage)
}

// GetChannel mocks base method
func (m *MockAPI) GetChannel(channelId string) (*model.Channel, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", channelId)
	ret0, _ := ret[0].(*model.Channel)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel
func (mr *MockAPIMockRecorder) GetChannel(channelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockAPI)(nil).GetChannel), channelId)
}

// GetChannelByName mocks base method
func (m *MockAPI) GetChannelByName(teamId, name string, includeDeleted bool) (*model.Channel, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelByName", teamId, name, includeDeleted)
	ret0, _ := ret[0].(*model.Channel)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetChannelByName indicates an expected call of GetChannelByName
func (mr *MockAPIMockRecorder) GetChannelByName(teamId, name, includeDeleted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelByName", reflect.TypeOf((*MockAPI)(nil).GetChannelByName), teamId, name, includeDeleted)
}

// GetChannelByNameForTeamName mocks base method
func (m *MockAPI) GetChannelByNameForTeamName(teamName, channelName string, includeDeleted bool) (*model.Channel, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelByNameForTeamName", teamName, channelName, includeDeleted)
	ret0, _ := ret[0].(*model.Channel)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetChannelByNameForTeamName indicates an expected call of GetChannelByNameForTeamName
func (mr *MockAPIMockRecorder) GetChannelByNameForTeamName(teamName, channelName, includeDeleted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelByNameForTeamName", reflect.TypeOf((*MockAPI)(nil).GetChannelByNameForTeamName), teamName, channelName, includeDeleted)
}

// GetChannelsForTeamForUser mocks base method
func (m *MockAPI) GetChannelsForTeamForUser(teamId, userId string, includeDeleted bool) ([]*model.Channel, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelsForTeamForUser", teamId, userId, includeDeleted)
	ret0, _ := ret[0].([]*model.Channel)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetChannelsForTeamForUser indicates an expected call of GetChannelsForTeamForUser
func (mr *MockAPIMockRecorder) GetChannelsForTeamForUser(teamId, userId, includeDeleted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelsForTeamForUser", reflect.TypeOf((*MockAPI)(nil).GetChannelsForTeamForUser), teamId, userId, includeDeleted)
}

// GetChannelStats mocks base method
func (m *MockAPI) GetChannelStats(channelId string) (*model.ChannelStats, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelStats", channelId)
	ret0, _ := ret[0].(*model.ChannelStats)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetChannelStats indicates an expected call of GetChannelStats
func (mr *MockAPIMockRecorder) GetChannelStats(channelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelStats", reflect.TypeOf((*MockAPI)(nil).GetChannelStats), channelId)
}

// GetDirectChannel mocks base method
func (m *MockAPI) GetDirectChannel(userId1, userId2 string) (*model.Channel, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectChannel", userId1, userId2)
	ret0, _ := ret[0].(*model.Channel)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetDirectChannel indicates an expected call of GetDirectChannel
func (mr *MockAPIMockRecorder) GetDirectChannel(userId1, userId2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectChannel", reflect.TypeOf((*MockAPI)(nil).GetDirectChannel), userId1, userId2)
}

// GetGroupChannel mocks base method
func (m *MockAPI) GetGroupChannel(userIds []string) (*model.Channel, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupChannel", userIds)
	ret0, _ := ret[0].(*model.Channel)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetGroupChannel indicates an expected call of GetGroupChannel
func (mr *MockAPIMockRecorder) GetGroupChannel(userIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupChannel", reflect.TypeOf((*MockAPI)(nil).GetGroupChannel), userIds)
}

// UpdateChannel mocks base method
func (m *MockAPI) UpdateChannel(channel *model.Channel) (*model.Channel, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", channel)
	ret0, _ := ret[0].(*model.Channel)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// UpdateChannel indicates an expected call of UpdateChannel
func (mr *MockAPIMockRecorder) UpdateChannel(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockAPI)(nil).UpdateChannel), channel)
}

// SearchChannels mocks base method
func (m *MockAPI) SearchChannels(teamId, term string) ([]*model.Channel, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchChannels", teamId, term)
	ret0, _ := ret[0].([]*model.Channel)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// SearchChannels indicates an expected call of SearchChannels
func (mr *MockAPIMockRecorder) SearchChannels(teamId, term interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchChannels", reflect.TypeOf((*MockAPI)(nil).SearchChannels), teamId, term)
}

// SearchUsers mocks base method
func (m *MockAPI) SearchUsers(search *model.UserSearch) ([]*model.User, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsers", search)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// SearchUsers indicates an expected call of SearchUsers
func (mr *MockAPIMockRecorder) SearchUsers(search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsers", reflect.TypeOf((*MockAPI)(nil).SearchUsers), search)
}

// SearchPostsInTeam mocks base method
func (m *MockAPI) SearchPostsInTeam(teamId string, paramsList []*model.SearchParams) ([]*model.Post, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPostsInTeam", teamId, paramsList)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// SearchPostsInTeam indicates an expected call of SearchPostsInTeam
func (mr *MockAPIMockRecorder) SearchPostsInTeam(teamId, paramsList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPostsInTeam", reflect.TypeOf((*MockAPI)(nil).SearchPostsInTeam), teamId, paramsList)
}

// AddChannelMember mocks base method
func (m *MockAPI) AddChannelMember(channelId, userId string) (*model.ChannelMember, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChannelMember", channelId, userId)
	ret0, _ := ret[0].(*model.ChannelMember)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// AddChannelMember indicates an expected call of AddChannelMember
func (mr *MockAPIMockRecorder) AddChannelMember(channelId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChannelMember", reflect.TypeOf((*MockAPI)(nil).AddChannelMember), channelId, userId)
}

// GetChannelMember mocks base method
func (m *MockAPI) GetChannelMember(channelId, userId string) (*model.ChannelMember, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelMember", channelId, userId)
	ret0, _ := ret[0].(*model.ChannelMember)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetChannelMember indicates an expected call of GetChannelMember
func (mr *MockAPIMockRecorder) GetChannelMember(channelId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelMember", reflect.TypeOf((*MockAPI)(nil).GetChannelMember), channelId, userId)
}

// GetChannelMembers mocks base method
func (m *MockAPI) GetChannelMembers(channelId string, page, perPage int) (*model.ChannelMembers, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelMembers", channelId, page, perPage)
	ret0, _ := ret[0].(*model.ChannelMembers)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetChannelMembers indicates an expected call of GetChannelMembers
func (mr *MockAPIMockRecorder) GetChannelMembers(channelId, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelMembers", reflect.TypeOf((*MockAPI)(nil).GetChannelMembers), channelId, page, perPage)
}

// GetChannelMembersByIds mocks base method
func (m *MockAPI) GetChannelMembersByIds(channelId string, userIds []string) (*model.ChannelMembers, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelMembersByIds", channelId, userIds)
	ret0, _ := ret[0].(*model.ChannelMembers)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetChannelMembersByIds indicates an expected call of GetChannelMembersByIds
func (mr *MockAPIMockRecorder) GetChannelMembersByIds(channelId, userIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelMembersByIds", reflect.TypeOf((*MockAPI)(nil).GetChannelMembersByIds), channelId, userIds)
}

// GetChannelMembersForUser mocks base method
func (m *MockAPI) GetChannelMembersForUser(teamId, userId string, page, perPage int) ([]*model.ChannelMember, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelMembersForUser", teamId, userId, page, perPage)
	ret0, _ := ret[0].([]*model.ChannelMember)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetChannelMembersForUser indicates an expected call of GetChannelMembersForUser
func (mr *MockAPIMockRecorder) GetChannelMembersForUser(teamId, userId, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelMembersForUser", reflect.TypeOf((*MockAPI)(nil).GetChannelMembersForUser), teamId, userId, page, perPage)
}

// UpdateChannelMemberRoles mocks base method
func (m *MockAPI) UpdateChannelMemberRoles(channelId, userId, newRoles string) (*model.ChannelMember, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelMemberRoles", channelId, userId, newRoles)
	ret0, _ := ret[0].(*model.ChannelMember)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// UpdateChannelMemberRoles indicates an expected call of UpdateChannelMemberRoles
func (mr *MockAPIMockRecorder) UpdateChannelMemberRoles(channelId, userId, newRoles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelMemberRoles", reflect.TypeOf((*MockAPI)(nil).UpdateChannelMemberRoles), channelId, userId, newRoles)
}

// UpdateChannelMemberNotifications mocks base method
func (m *MockAPI) UpdateChannelMemberNotifications(channelId, userId string, notifications map[string]string) (*model.ChannelMember, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelMemberNotifications", channelId, userId, notifications)
	ret0, _ := ret[0].(*model.ChannelMember)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// UpdateChannelMemberNotifications indicates an expected call of UpdateChannelMemberNotifications
func (mr *MockAPIMockRecorder) UpdateChannelMemberNotifications(channelId, userId, notifications interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelMemberNotifications", reflect.TypeOf((*MockAPI)(nil).UpdateChannelMemberNotifications), channelId, userId, notifications)
}

// DeleteChannelMember mocks base method
func (m *MockAPI) DeleteChannelMember(channelId, userId string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelMember", channelId, userId)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// DeleteChannelMember indicates an expected call of DeleteChannelMember
func (mr *MockAPIMockRecorder) DeleteChannelMember(channelId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelMember", reflect.TypeOf((*MockAPI)(nil).DeleteChannelMember), channelId, userId)
}

// CreatePost mocks base method
func (m *MockAPI) CreatePost(post *model.Post) (*model.Post, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", post)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost
func (mr *MockAPIMockRecorder) CreatePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockAPI)(nil).CreatePost), post)
}

// AddReaction mocks base method
func (m *MockAPI) AddReaction(reaction *model.Reaction) (*model.Reaction, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReaction", reaction)
	ret0, _ := ret[0].(*model.Reaction)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// AddReaction indicates an expected call of AddReaction
func (mr *MockAPIMockRecorder) AddReaction(reaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReaction", reflect.TypeOf((*MockAPI)(nil).AddReaction), reaction)
}

// RemoveReaction mocks base method
func (m *MockAPI) RemoveReaction(reaction *model.Reaction) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReaction", reaction)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// RemoveReaction indicates an expected call of RemoveReaction
func (mr *MockAPIMockRecorder) RemoveReaction(reaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReaction", reflect.TypeOf((*MockAPI)(nil).RemoveReaction), reaction)
}

// GetReactions mocks base method
func (m *MockAPI) GetReactions(postId string) ([]*model.Reaction, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReactions", postId)
	ret0, _ := ret[0].([]*model.Reaction)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetReactions indicates an expected call of GetReactions
func (mr *MockAPIMockRecorder) GetReactions(postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReactions", reflect.TypeOf((*MockAPI)(nil).GetReactions), postId)
}

// SendEphemeralPost mocks base method
func (m *MockAPI) SendEphemeralPost(userId string, post *model.Post) *model.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEphemeralPost", userId, post)
	ret0, _ := ret[0].(*model.Post)
	return ret0
}

// SendEphemeralPost indicates an expected call of SendEphemeralPost
func (mr *MockAPIMockRecorder) SendEphemeralPost(userId, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEphemeralPost", reflect.TypeOf((*MockAPI)(nil).SendEphemeralPost), userId, post)
}

// UpdateEphemeralPost mocks base method
func (m *MockAPI) UpdateEphemeralPost(userId string, post *model.Post) *model.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEphemeralPost", userId, post)
	ret0, _ := ret[0].(*model.Post)
	return ret0
}

// UpdateEphemeralPost indicates an expected call of UpdateEphemeralPost
func (mr *MockAPIMockRecorder) UpdateEphemeralPost(userId, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEphemeralPost", reflect.TypeOf((*MockAPI)(nil).UpdateEphemeralPost), userId, post)
}

// DeleteEphemeralPost mocks base method
func (m *MockAPI) DeleteEphemeralPost(userId, postId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteEphemeralPost", userId, postId)
}

// DeleteEphemeralPost indicates an expected call of DeleteEphemeralPost
func (mr *MockAPIMockRecorder) DeleteEphemeralPost(userId, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEphemeralPost", reflect.TypeOf((*MockAPI)(nil).DeleteEphemeralPost), userId, postId)
}

// DeletePost mocks base method
func (m *MockAPI) DeletePost(postId string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", postId)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// DeletePost indicates an expected call of DeletePost
func (mr *MockAPIMockRecorder) DeletePost(postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockAPI)(nil).DeletePost), postId)
}

// GetPostThread mocks base method
func (m *MockAPI) GetPostThread(postId string) (*model.PostList, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostThread", postId)
	ret0, _ := ret[0].(*model.PostList)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetPostThread indicates an expected call of GetPostThread
func (mr *MockAPIMockRecorder) GetPostThread(postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostThread", reflect.TypeOf((*MockAPI)(nil).GetPostThread), postId)
}

// GetPost mocks base method
func (m *MockAPI) GetPost(postId string) (*model.Post, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", postId)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost
func (mr *MockAPIMockRecorder) GetPost(postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockAPI)(nil).GetPost), postId)
}

// GetPostsSince mocks base method
func (m *MockAPI) GetPostsSince(channelId string, time int64) (*model.PostList, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsSince", channelId, time)
	ret0, _ := ret[0].(*model.PostList)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetPostsSince indicates an expected call of GetPostsSince
func (mr *MockAPIMockRecorder) GetPostsSince(channelId, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsSince", reflect.TypeOf((*MockAPI)(nil).GetPostsSince), channelId, time)
}

// GetPostsAfter mocks base method
func (m *MockAPI) GetPostsAfter(channelId, postId string, page, perPage int) (*model.PostList, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsAfter", channelId, postId, page, perPage)
	ret0, _ := ret[0].(*model.PostList)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetPostsAfter indicates an expected call of GetPostsAfter
func (mr *MockAPIMockRecorder) GetPostsAfter(channelId, postId, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsAfter", reflect.TypeOf((*MockAPI)(nil).GetPostsAfter), channelId, postId, page, perPage)
}

// GetPostsBefore mocks base method
func (m *MockAPI) GetPostsBefore(channelId, postId string, page, perPage int) (*model.PostList, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsBefore", channelId, postId, page, perPage)
	ret0, _ := ret[0].(*model.PostList)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetPostsBefore indicates an expected call of GetPostsBefore
func (mr *MockAPIMockRecorder) GetPostsBefore(channelId, postId, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsBefore", reflect.TypeOf((*MockAPI)(nil).GetPostsBefore), channelId, postId, page, perPage)
}

// GetPostsForChannel mocks base method
func (m *MockAPI) GetPostsForChannel(channelId string, page, perPage int) (*model.PostList, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsForChannel", channelId, page, perPage)
	ret0, _ := ret[0].(*model.PostList)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetPostsForChannel indicates an expected call of GetPostsForChannel
func (mr *MockAPIMockRecorder) GetPostsForChannel(channelId, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsForChannel", reflect.TypeOf((*MockAPI)(nil).GetPostsForChannel), channelId, page, perPage)
}

// GetTeamStats mocks base method
func (m *MockAPI) GetTeamStats(teamId string) (*model.TeamStats, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamStats", teamId)
	ret0, _ := ret[0].(*model.TeamStats)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetTeamStats indicates an expected call of GetTeamStats
func (mr *MockAPIMockRecorder) GetTeamStats(teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamStats", reflect.TypeOf((*MockAPI)(nil).GetTeamStats), teamId)
}

// UpdatePost mocks base method
func (m *MockAPI) UpdatePost(post *model.Post) (*model.Post, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", post)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost
func (mr *MockAPIMockRecorder) UpdatePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockAPI)(nil).UpdatePost), post)
}

// GetProfileImage mocks base method
func (m *MockAPI) GetProfileImage(userId string) ([]byte, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileImage", userId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetProfileImage indicates an expected call of GetProfileImage
func (mr *MockAPIMockRecorder) GetProfileImage(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileImage", reflect.TypeOf((*MockAPI)(nil).GetProfileImage), userId)
}

// SetProfileImage mocks base method
func (m *MockAPI) SetProfileImage(userId string, data []byte) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProfileImage", userId, data)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// SetProfileImage indicates an expected call of SetProfileImage
func (mr *MockAPIMockRecorder) SetProfileImage(userId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfileImage", reflect.TypeOf((*MockAPI)(nil).SetProfileImage), userId, data)
}

// GetEmojiList mocks base method
func (m *MockAPI) GetEmojiList(sortBy string, page, perPage int) ([]*model.Emoji, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmojiList", sortBy, page, perPage)
	ret0, _ := ret[0].([]*model.Emoji)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetEmojiList indicates an expected call of GetEmojiList
func (mr *MockAPIMockRecorder) GetEmojiList(sortBy, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmojiList", reflect.TypeOf((*MockAPI)(nil).GetEmojiList), sortBy, page, perPage)
}

// GetEmojiByName mocks base method
func (m *MockAPI) GetEmojiByName(name string) (*model.Emoji, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmojiByName", name)
	ret0, _ := ret[0].(*model.Emoji)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetEmojiByName indicates an expected call of GetEmojiByName
func (mr *MockAPIMockRecorder) GetEmojiByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmojiByName", reflect.TypeOf((*MockAPI)(nil).GetEmojiByName), name)
}

// GetEmoji mocks base method
func (m *MockAPI) GetEmoji(emojiId string) (*model.Emoji, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmoji", emojiId)
	ret0, _ := ret[0].(*model.Emoji)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetEmoji indicates an expected call of GetEmoji
func (mr *MockAPIMockRecorder) GetEmoji(emojiId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmoji", reflect.TypeOf((*MockAPI)(nil).GetEmoji), emojiId)
}

// CopyFileInfos mocks base method
func (m *MockAPI) CopyFileInfos(userId string, fileIds []string) ([]string, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFileInfos", userId, fileIds)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// CopyFileInfos indicates an expected call of CopyFileInfos
func (mr *MockAPIMockRecorder) CopyFileInfos(userId, fileIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFileInfos", reflect.TypeOf((*MockAPI)(nil).CopyFileInfos), userId, fileIds)
}

// GetFileInfo mocks base method
func (m *MockAPI) GetFileInfo(fileId string) (*model.FileInfo, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", fileId)
	ret0, _ := ret[0].(*model.FileInfo)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo
func (mr *MockAPIMockRecorder) GetFileInfo(fileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockAPI)(nil).GetFileInfo), fileId)
}

// GetFile mocks base method
func (m *MockAPI) GetFile(fileId string) ([]byte, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", fileId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile
func (mr *MockAPIMockRecorder) GetFile(fileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockAPI)(nil).GetFile), fileId)
}

// GetFileLink mocks base method
func (m *MockAPI) GetFileLink(fileId string) (string, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileLink", fileId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetFileLink indicates an expected call of GetFileLink
func (mr *MockAPIMockRecorder) GetFileLink(fileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileLink", reflect.TypeOf((*MockAPI)(nil).GetFileLink), fileId)
}

// ReadFile mocks base method
func (m *MockAPI) ReadFile(path string) ([]byte, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile
func (mr *MockAPIMockRecorder) ReadFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockAPI)(nil).ReadFile), path)
}

// GetEmojiImage mocks base method
func (m *MockAPI) GetEmojiImage(emojiId string) ([]byte, string, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmojiImage", emojiId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(*model.AppError)
	return ret0, ret1, ret2
}

// GetEmojiImage indicates an expected call of GetEmojiImage
func (mr *MockAPIMockRecorder) GetEmojiImage(emojiId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmojiImage", reflect.TypeOf((*MockAPI)(nil).GetEmojiImage), emojiId)
}

// UploadFile mocks base method
func (m *MockAPI) UploadFile(data []byte, channelId, filename string) (*model.FileInfo, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", data, channelId, filename)
	ret0, _ := ret[0].(*model.FileInfo)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile
func (mr *MockAPIMockRecorder) UploadFile(data, channelId, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockAPI)(nil).UploadFile), data, channelId, filename)
}

// OpenInteractiveDialog mocks base method
func (m *MockAPI) OpenInteractiveDialog(dialog model.OpenDialogRequest) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenInteractiveDialog", dialog)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// OpenInteractiveDialog indicates an expected call of OpenInteractiveDialog
func (mr *MockAPIMockRecorder) OpenInteractiveDialog(dialog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenInteractiveDialog", reflect.TypeOf((*MockAPI)(nil).OpenInteractiveDialog), dialog)
}

// GetPlugins mocks base method
func (m *MockAPI) GetPlugins() ([]*model.Manifest, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugins")
	ret0, _ := ret[0].([]*model.Manifest)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetPlugins indicates an expected call of GetPlugins
func (mr *MockAPIMockRecorder) GetPlugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugins", reflect.TypeOf((*MockAPI)(nil).GetPlugins))
}

// EnablePlugin mocks base method
func (m *MockAPI) EnablePlugin(id string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePlugin", id)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// EnablePlugin indicates an expected call of EnablePlugin
func (mr *MockAPIMockRecorder) EnablePlugin(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePlugin", reflect.TypeOf((*MockAPI)(nil).EnablePlugin), id)
}

// DisablePlugin mocks base method
func (m *MockAPI) DisablePlugin(id string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisablePlugin", id)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// DisablePlugin indicates an expected call of DisablePlugin
func (mr *MockAPIMockRecorder) DisablePlugin(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisablePlugin", reflect.TypeOf((*MockAPI)(nil).DisablePlugin), id)
}

// RemovePlugin mocks base method
func (m *MockAPI) RemovePlugin(id string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePlugin", id)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// RemovePlugin indicates an expected call of RemovePlugin
func (mr *MockAPIMockRecorder) RemovePlugin(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePlugin", reflect.TypeOf((*MockAPI)(nil).RemovePlugin), id)
}

// GetPluginStatus mocks base method
func (m *MockAPI) GetPluginStatus(id string) (*model.PluginStatus, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginStatus", id)
	ret0, _ := ret[0].(*model.PluginStatus)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetPluginStatus indicates an expected call of GetPluginStatus
func (mr *MockAPIMockRecorder) GetPluginStatus(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginStatus", reflect.TypeOf((*MockAPI)(nil).GetPluginStatus), id)
}

// KVSet mocks base method
func (m *MockAPI) KVSet(key string, value []byte) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVSet", key, value)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// KVSet indicates an expected call of KVSet
func (mr *MockAPIMockRecorder) KVSet(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVSet", reflect.TypeOf((*MockAPI)(nil).KVSet), key, value)
}

// KVCompareAndSet mocks base method
func (m *MockAPI) KVCompareAndSet(key string, oldValue, newValue []byte) (bool, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVCompareAndSet", key, oldValue, newValue)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// KVCompareAndSet indicates an expected call of KVCompareAndSet
func (mr *MockAPIMockRecorder) KVCompareAndSet(key, oldValue, newValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVCompareAndSet", reflect.TypeOf((*MockAPI)(nil).KVCompareAndSet), key, oldValue, newValue)
}

// KVCompareAndDelete mocks base method
func (m *MockAPI) KVCompareAndDelete(key string, oldValue []byte) (bool, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVCompareAndDelete", key, oldValue)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// KVCompareAndDelete indicates an expected call of KVCompareAndDelete
func (mr *MockAPIMockRecorder) KVCompareAndDelete(key, oldValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVCompareAndDelete", reflect.TypeOf((*MockAPI)(nil).KVCompareAndDelete), key, oldValue)
}

// KVSetWithExpiry mocks base method
func (m *MockAPI) KVSetWithExpiry(key string, value []byte, expireInSeconds int64) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVSetWithExpiry", key, value, expireInSeconds)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// KVSetWithExpiry indicates an expected call of KVSetWithExpiry
func (mr *MockAPIMockRecorder) KVSetWithExpiry(key, value, expireInSeconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVSetWithExpiry", reflect.TypeOf((*MockAPI)(nil).KVSetWithExpiry), key, value, expireInSeconds)
}

// KVGet mocks base method
func (m *MockAPI) KVGet(key string) ([]byte, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVGet", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// KVGet indicates an expected call of KVGet
func (mr *MockAPIMockRecorder) KVGet(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVGet", reflect.TypeOf((*MockAPI)(nil).KVGet), key)
}

// KVDelete mocks base method
func (m *MockAPI) KVDelete(key string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVDelete", key)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// KVDelete indicates an expected call of KVDelete
func (mr *MockAPIMockRecorder) KVDelete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVDelete", reflect.TypeOf((*MockAPI)(nil).KVDelete), key)
}

// KVDeleteAll mocks base method
func (m *MockAPI) KVDeleteAll() *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVDeleteAll")
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// KVDeleteAll indicates an expected call of KVDeleteAll
func (mr *MockAPIMockRecorder) KVDeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVDeleteAll", reflect.TypeOf((*MockAPI)(nil).KVDeleteAll))
}

// KVList mocks base method
func (m *MockAPI) KVList(page, perPage int) ([]string, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVList", page, perPage)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// KVList indicates an expected call of KVList
func (mr *MockAPIMockRecorder) KVList(page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVList", reflect.TypeOf((*MockAPI)(nil).KVList), page, perPage)
}

// PublishWebSocketEvent mocks base method
func (m *MockAPI) PublishWebSocketEvent(event string, payload map[string]interface{}, broadcast *model.WebsocketBroadcast) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishWebSocketEvent", event, payload, broadcast)
}

// PublishWebSocketEvent indicates an expected call of PublishWebSocketEvent
func (mr *MockAPIMockRecorder) PublishWebSocketEvent(event, payload, broadcast interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWebSocketEvent", reflect.TypeOf((*MockAPI)(nil).PublishWebSocketEvent), event, payload, broadcast)
}

// HasPermissionTo mocks base method
func (m *MockAPI) HasPermissionTo(userId string, permission *model.Permission) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPermissionTo", userId, permission)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPermissionTo indicates an expected call of HasPermissionTo
func (mr *MockAPIMockRecorder) HasPermissionTo(userId, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermissionTo", reflect.TypeOf((*MockAPI)(nil).HasPermissionTo), userId, permission)
}

// HasPermissionToTeam mocks base method
func (m *MockAPI) HasPermissionToTeam(userId, teamId string, permission *model.Permission) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPermissionToTeam", userId, teamId, permission)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPermissionToTeam indicates an expected call of HasPermissionToTeam
func (mr *MockAPIMockRecorder) HasPermissionToTeam(userId, teamId, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermissionToTeam", reflect.TypeOf((*MockAPI)(nil).HasPermissionToTeam), userId, teamId, permission)
}

// HasPermissionToChannel mocks base method
func (m *MockAPI) HasPermissionToChannel(userId, channelId string, permission *model.Permission) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPermissionToChannel", userId, channelId, permission)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPermissionToChannel indicates an expected call of HasPermissionToChannel
func (mr *MockAPIMockRecorder) HasPermissionToChannel(userId, channelId, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermissionToChannel", reflect.TypeOf((*MockAPI)(nil).HasPermissionToChannel), userId, channelId, permission)
}

// LogDebug mocks base method
func (m *MockAPI) LogDebug(msg string, keyValuePairs ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range keyValuePairs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "LogDebug", varargs...)
}

// LogDebug indicates an expected call of LogDebug
func (mr *MockAPIMockRecorder) LogDebug(msg interface{}, keyValuePairs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, keyValuePairs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogDebug", reflect.TypeOf((*MockAPI)(nil).LogDebug), varargs...)
}

// LogInfo mocks base method
func (m *MockAPI) LogInfo(msg string, keyValuePairs ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range keyValuePairs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "LogInfo", varargs...)
}

// LogInfo indicates an expected call of LogInfo
func (mr *MockAPIMockRecorder) LogInfo(msg interface{}, keyValuePairs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, keyValuePairs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInfo", reflect.TypeOf((*MockAPI)(nil).LogInfo), varargs...)
}

// LogError mocks base method
func (m *MockAPI) LogError(msg string, keyValuePairs ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range keyValuePairs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "LogError", varargs...)
}

// LogError indicates an expected call of LogError
func (mr *MockAPIMockRecorder) LogError(msg interface{}, keyValuePairs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, keyValuePairs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*MockAPI)(nil).LogError), varargs...)
}

// LogWarn mocks base method
func (m *MockAPI) LogWarn(msg string, keyValuePairs ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range keyValuePairs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "LogWarn", varargs...)
}

// LogWarn indicates an expected call of LogWarn
func (mr *MockAPIMockRecorder) LogWarn(msg interface{}, keyValuePairs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, keyValuePairs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogWarn", reflect.TypeOf((*MockAPI)(nil).LogWarn), varargs...)
}

// SendMail mocks base method
func (m *MockAPI) SendMail(to, subject, htmlBody string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", to, subject, htmlBody)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// SendMail indicates an expected call of SendMail
func (mr *MockAPIMockRecorder) SendMail(to, subject, htmlBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockAPI)(nil).SendMail), to, subject, htmlBody)
}

// CreateBot mocks base method
func (m *MockAPI) CreateBot(bot *model.Bot) (*model.Bot, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBot", bot)
	ret0, _ := ret[0].(*model.Bot)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// CreateBot indicates an expected call of CreateBot
func (mr *MockAPIMockRecorder) CreateBot(bot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBot", reflect.TypeOf((*MockAPI)(nil).CreateBot), bot)
}

// PatchBot mocks base method
func (m *MockAPI) PatchBot(botUserId string, botPatch *model.BotPatch) (*model.Bot, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchBot", botUserId, botPatch)
	ret0, _ := ret[0].(*model.Bot)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// PatchBot indicates an expected call of PatchBot
func (mr *MockAPIMockRecorder) PatchBot(botUserId, botPatch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchBot", reflect.TypeOf((*MockAPI)(nil).PatchBot), botUserId, botPatch)
}

// GetBot mocks base method
func (m *MockAPI) GetBot(botUserId string, includeDeleted bool) (*model.Bot, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBot", botUserId, includeDeleted)
	ret0, _ := ret[0].(*model.Bot)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetBot indicates an expected call of GetBot
func (mr *MockAPIMockRecorder) GetBot(botUserId, includeDeleted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBot", reflect.TypeOf((*MockAPI)(nil).GetBot), botUserId, includeDeleted)
}

// GetBots mocks base method
func (m *MockAPI) GetBots(options *model.BotGetOptions) ([]*model.Bot, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBots", options)
	ret0, _ := ret[0].([]*model.Bot)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetBots indicates an expected call of GetBots
func (mr *MockAPIMockRecorder) GetBots(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBots", reflect.TypeOf((*MockAPI)(nil).GetBots), options)
}

// UpdateBotActive mocks base method
func (m *MockAPI) UpdateBotActive(botUserId string, active bool) (*model.Bot, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBotActive", botUserId, active)
	ret0, _ := ret[0].(*model.Bot)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// UpdateBotActive indicates an expected call of UpdateBotActive
func (mr *MockAPIMockRecorder) UpdateBotActive(botUserId, active interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBotActive", reflect.TypeOf((*MockAPI)(nil).UpdateBotActive), botUserId, active)
}

// PermanentDeleteBot mocks base method
func (m *MockAPI) PermanentDeleteBot(botUserId string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermanentDeleteBot", botUserId)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// PermanentDeleteBot indicates an expected call of PermanentDeleteBot
func (mr *MockAPIMockRecorder) PermanentDeleteBot(botUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermanentDeleteBot", reflect.TypeOf((*MockAPI)(nil).PermanentDeleteBot), botUserId)
}

// GetBotIconImage mocks base method
func (m *MockAPI) GetBotIconImage(botUserId string) ([]byte, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotIconImage", botUserId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// GetBotIconImage indicates an expected call of GetBotIconImage
func (mr *MockAPIMockRecorder) GetBotIconImage(botUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotIconImage", reflect.TypeOf((*MockAPI)(nil).GetBotIconImage), botUserId)
}

// SetBotIconImage mocks base method
func (m *MockAPI) SetBotIconImage(botUserId string, data []byte) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBotIconImage", botUserId, data)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// SetBotIconImage indicates an expected call of SetBotIconImage
func (mr *MockAPIMockRecorder) SetBotIconImage(botUserId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBotIconImage", reflect.TypeOf((*MockAPI)(nil).SetBotIconImage), botUserId, data)
}

// DeleteBotIconImage mocks base method
func (m *MockAPI) DeleteBotIconImage(botUserId string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBotIconImage", botUserId)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// DeleteBotIconImage indicates an expected call of DeleteBotIconImage
func (mr *MockAPIMockRecorder) DeleteBotIconImage(botUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBotIconImage", reflect.TypeOf((*MockAPI)(nil).DeleteBotIconImage), botUserId)
}
